{"version":3,"file":"groq-store.js","sources":["../../src/listen.ts","../../src/drafts.ts","../../src/patch.ts","../../src/syncingDataset.ts","../../src/groqStore.ts","../../src/exportUtils.ts","../../src/node/getDocuments.ts","../../src/node/support.ts","../../src/index.ts"],"sourcesContent":["import {Subscription, MutationEvent, Config, ApiError} from './types'\n\nexport function listen(\n  EventSourceImpl: typeof EventSource,\n  config: Config,\n  handlers: {\n    open: () => void\n    error: (err: Error) => void\n    next: (event: MutationEvent) => void\n  }\n): Subscription {\n  const {projectId, dataset, token} = config\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}?query=*&effectFormat=mendoza`\n  const es = new EventSourceImpl(url, {withCredentials: true, headers} as any)\n\n  es.addEventListener('welcome', handlers.open, false)\n\n  es.addEventListener('mutation', getMutationParser(handlers.next), false)\n\n  es.addEventListener(\n    'channelError',\n    (msg: any) => {\n      es.close()\n\n      let data\n      try {\n        data = JSON.parse(msg.data) as ApiError\n      } catch (err) {\n        handlers.error(new Error('Unknown error parsing listener message'))\n        return\n      }\n\n      handlers.error(\n        new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`)\n      )\n    },\n    false\n  )\n\n  es.addEventListener(\n    'error',\n    (err) => {\n      const origin = typeof window !== 'undefined' && window.location.origin\n      const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : ''\n      const errorMessage = isErrorLike(err) ? ` (${err.message})` : ''\n      handlers.error(\n        new Error(\n          `Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`\n        )\n      )\n    },\n    false\n  )\n\n  return {\n    unsubscribe: (): Promise<void> => Promise.resolve(es.close()),\n  }\n}\n\nfunction getMutationParser(cb: (event: MutationEvent) => void): (msg: any) => void {\n  return (msg: any) => {\n    let data\n    try {\n      data = JSON.parse(msg.data)\n    } catch (err) {\n      // intentional noop\n      return\n    }\n\n    cb(data)\n  }\n}\n\nfunction isErrorLike(err: unknown): err is {message: string} {\n  return typeof err === 'object' && err !== null && 'message' in err\n}\n","import {SanityDocument} from '@sanity/types'\n\nexport function isDraft(doc: SanityDocument): boolean {\n  return doc._id.startsWith('drafts.')\n}\n\nexport function getPublishedId(document: SanityDocument): string {\n  return isDraft(document) ? document._id.slice(7) : document._id\n}\n","import {SanityDocument} from '@sanity/types'\nimport {applyPatch} from 'mendoza'\n\nexport function applyPatchWithoutRev(\n  doc: SanityDocument | null,\n  patch: unknown[]\n): SanityDocument | null {\n  const patchDoc = {...doc} as Omit<SanityDocument, '_rev'>\n  delete patchDoc._rev\n  return applyPatch(patchDoc, patch)\n}\n","import {SanityDocument} from '@sanity/types'\nimport {listen} from './listen'\nimport {getPublishedId} from './drafts'\nimport {applyPatchWithoutRev} from './patch'\nimport {Config, EnvImplementations, MutationEvent, Subscription} from './types'\n\nconst DEBOUNCE_MS = 25\n\nfunction noop() {\n  return Promise.resolve()\n}\n\nexport function getSyncingDataset(\n  config: Config,\n  onNotifyUpdate: (docs: SanityDocument[]) => void,\n  {getDocuments, EventSource}: EnvImplementations\n): Subscription & {loaded: Promise<void>} {\n  const {projectId, dataset, listen: useListener, overlayDrafts, documentLimit} = config\n\n  if (!useListener) {\n    const loaded = getDocuments({projectId, dataset, documentLimit}).then(onUpdate).then(noop)\n    return {unsubscribe: noop, loaded}\n  }\n\n  const indexedDocuments = new Map<string, SanityDocument>()\n\n  // undefined until the listener has been set up and the initial export is done\n  let documents: SanityDocument[] | undefined\n\n  // holds any mutations that happen while fetching documents so they can be applied after updates\n  const buffer: MutationEvent[] = []\n\n  // Return a promise we can resolve once we've established a listener and reconciled any mutations\n  let onDoneLoading: () => void\n  let onLoadError: (error: Error) => void\n  const loaded = new Promise<void>((resolve, reject) => {\n    onDoneLoading = resolve\n    onLoadError = reject\n  })\n\n  // We don't want to flush updates while we're in the same transaction, so a normal\n  // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is\n  // within the same transaction as the previous, and if not we can flush. Of course,\n  // we can't wait forever, so an upper threshold of X ms should be counted as \"ok to flush\"\n  let stagedDocs: SanityDocument[] | undefined\n  let previousTrx: string | undefined\n  let flushTimeout: number | undefined\n\n  const listener = listen(EventSource, config, {\n    next: onMutationReceived,\n    open: onOpen,\n    error: (error: Error) => onLoadError(error),\n  })\n\n  return {unsubscribe: listener.unsubscribe, loaded}\n\n  async function onOpen() {\n    const initial = await getDocuments({projectId, dataset, documentLimit})\n    documents = applyBufferedMutations(initial, buffer)\n    documents.forEach((doc) => indexedDocuments.set(doc._id, doc))\n    onUpdate(documents)\n    onDoneLoading()\n  }\n\n  function onMutationReceived(msg: MutationEvent) {\n    if (documents) {\n      applyMutation(msg)\n      scheduleUpdate(documents, msg)\n    } else {\n      buffer.push(msg)\n    }\n  }\n\n  function scheduleUpdate(docs: SanityDocument[], msg: MutationEvent) {\n    clearTimeout(flushTimeout)\n\n    if (previousTrx !== msg.transactionId && stagedDocs) {\n      // This is a new transaction, meaning we can immediately flush any pending\n      // doc updates if there are any\n      onUpdate(stagedDocs)\n      previousTrx = undefined\n    } else {\n      previousTrx = msg.transactionId\n      stagedDocs = docs.slice()\n    }\n\n    flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice())\n  }\n\n  function onUpdate(docs: SanityDocument[]) {\n    stagedDocs = undefined\n    flushTimeout = undefined\n    previousTrx = undefined\n    onNotifyUpdate(overlayDrafts ? overlay(docs) : docs)\n  }\n\n  function applyMutation(msg: MutationEvent) {\n    if (!msg.effects || msg.documentId.startsWith('_.')) {\n      return\n    }\n\n    const document = indexedDocuments.get(msg.documentId) || null\n    replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply))\n  }\n\n  function replaceDocument(id: string, document: SanityDocument | null) {\n    const current = indexedDocuments.get(id)\n    const docs = documents || []\n    const position = current ? docs.indexOf(current) : -1\n\n    if (position === -1 && document) {\n      // Didn't exist previously, but was now created. Add it.\n      docs.push(document)\n      indexedDocuments.set(id, document)\n    } else if (document) {\n      // Existed previously and still does. Replace it.\n      docs.splice(position, 1, document)\n      indexedDocuments.set(id, document)\n    } else {\n      // Existed previously, but is now deleted. Remove it.\n      docs.splice(position, 1)\n      indexedDocuments.delete(id)\n    }\n  }\n}\n\nfunction applyBufferedMutations(\n  documents: SanityDocument[],\n  mutations: MutationEvent[]\n): SanityDocument[] {\n  // Group by document ID\n  const groups = new Map<string, MutationEvent[]>()\n  mutations.forEach((mutation) => {\n    const group = groups.get(mutation.documentId) || []\n    group.push(mutation)\n    groups.set(mutation.documentId, group)\n  })\n\n  // Discard all mutations that happened before our current document\n  groups.forEach((group, id) => {\n    const document = documents.find((doc) => doc._id === id)\n    if (!document) {\n      // @todo handle\n      // eslint-disable-next-line no-console\n      console.warn('Received mutation for missing document %s', id)\n      return\n    }\n\n    // Mutations are sorted by timestamp, apply any that arrived after\n    // we fetched the initial documents\n    let hasFoundRevision = false\n    let current: SanityDocument | null = document\n    group.forEach((mutation) => {\n      hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev\n      if (!hasFoundRevision) {\n        return\n      }\n\n      if (mutation.effects) {\n        current = applyPatchWithoutRev(current, mutation.effects.apply)\n      }\n    })\n\n    // Replace the indexed documents\n    documents.splice(documents.indexOf(document), 1, current)\n  })\n\n  return documents\n}\n\nfunction overlay(documents: SanityDocument[]): SanityDocument[] {\n  const overlayed = new Map<string, SanityDocument>()\n\n  documents.forEach((doc) => {\n    const existing = overlayed.get(getPublishedId(doc))\n    if (doc._id.startsWith('drafts.')) {\n      // Drafts always overlay\n      overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc))\n    } else if (!existing) {\n      // Published documents only override if draft doesn't exist\n      overlayed.set(doc._id, doc)\n    }\n  })\n\n  return Array.from(overlayed.values())\n}\n\n// Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,\n// but for now this will have to do\nfunction pretendThatItsPublished(doc: SanityDocument): SanityDocument {\n  return {...doc, _id: getPublishedId(doc)}\n}\n","import groq from 'groq'\nimport deepEqual from 'fast-deep-equal'\nimport {throttle} from 'throttle-debounce'\nimport {SanityDocument} from '@sanity/types'\nimport {parse, evaluate} from 'groq-js'\nimport {Config, EnvImplementations, GroqSubscription, GroqStore, Subscription} from './types'\nimport {getSyncingDataset} from './syncingDataset'\n\nexport function groqStore(config: Config, envImplementations: EnvImplementations): GroqStore {\n  let documents: SanityDocument[] = []\n  const executeThrottled = throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions)\n  const activeSubscriptions: GroqSubscription[] = []\n\n  let dataset: Subscription & {loaded: Promise<void>}\n\n  async function loadDataset() {\n    if (!dataset) {\n      dataset = getSyncingDataset(\n        config,\n        (docs) => {\n          documents = docs\n          executeThrottled()\n        },\n        envImplementations\n      )\n    }\n\n    await dataset.loaded\n  }\n\n  async function query<R = any>(groqQuery: string, params?: Record<string, unknown>): Promise<R> {\n    await loadDataset()\n    const tree = parse(groqQuery, {params})\n    const result = await evaluate(tree as any, {dataset: documents, params})\n    return result.get()\n  }\n\n  async function getDocument(documentId: string): Promise<SanityDocument | null> {\n    await loadDataset()\n    return query(groq`*[_id == $id][0]`, {id: documentId})\n  }\n\n  async function getDocuments(documentIds: string[]): Promise<(SanityDocument | null)[]> {\n    await loadDataset()\n    const subQueries = documentIds.map((id) => `*[_id == \"${id}\"][0]`).join(',\\n')\n    return query(`[${subQueries}]`)\n  }\n\n  function subscribe<R = any>(\n    groqQuery: string,\n    params: Record<string, unknown>,\n    callback: (error: Error | undefined, result?: R) => void\n  ): Subscription {\n    if (!config.listen) {\n      throw new Error('Cannot use `subscribe()` without `listen: true`')\n    }\n\n    // @todo Execute the query against an empty dataset for validation purposes\n\n    // Store the subscription so we can re-run the query on new data\n    const subscription = {query: groqQuery, params, callback}\n    activeSubscriptions.push(subscription)\n\n    let unsubscribed = false\n    const unsubscribe = () => {\n      if (unsubscribed) {\n        return Promise.resolve()\n      }\n\n      unsubscribed = true\n      activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)\n      return Promise.resolve()\n    }\n\n    executeQuerySubscription(subscription)\n    return {unsubscribe}\n  }\n\n  function executeQuerySubscription(subscription: GroqSubscription) {\n    return query(subscription.query, subscription.params)\n      .then((res) => {\n        if ('previousResult' in subscription && deepEqual(subscription.previousResult, res)) {\n          return\n        }\n\n        subscription.previousResult = res\n        subscription.callback(undefined, res)\n      })\n      .catch((err) => {\n        subscription.callback(err)\n      })\n  }\n\n  function executeAllSubscriptions() {\n    activeSubscriptions.forEach(executeQuerySubscription)\n  }\n\n  function close() {\n    executeThrottled.cancel()\n    return dataset ? dataset.unsubscribe() : Promise.resolve()\n  }\n\n  return {query, getDocument, getDocuments, subscribe, close}\n}\n","import {SanityDocument} from '@sanity/types'\nimport {ApiError, StreamError, StreamResult} from './types'\n\nexport function isStreamError(result: StreamResult | undefined): result is StreamError {\n  if (!result) {\n    return false\n  }\n\n  if (!('error' in result) || typeof result.error !== 'object' || result.error === null) {\n    return false\n  }\n\n  return (\n    'description' in result.error &&\n    typeof (result as StreamError).error.description === 'string' &&\n    !('_id' in result)\n  )\n}\n\nexport function getError(body: ApiError): string {\n  if (typeof body === 'object' && 'error' in body && 'message' in body) {\n    return body.message || body.error\n  }\n\n  return '<unknown error>'\n}\n\nexport function isRelevantDocument(doc: SanityDocument): boolean {\n  return !doc._id.startsWith('_.')\n}\n","import split from 'split2'\nimport get from 'simple-get'\nimport {SanityDocument} from '@sanity/types'\nimport {EnvImplementations, StreamResult} from '../types'\nimport {getError, isRelevantDocument, isStreamError} from '../exportUtils'\n\nexport const getDocuments: EnvImplementations['getDocuments'] = function getDocuments({\n  projectId,\n  dataset,\n  token,\n  documentLimit,\n}: {\n  projectId: string\n  dataset: string\n  token?: string\n  documentLimit?: number\n}): Promise<SanityDocument[]> {\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n\n  return new Promise((resolve, reject) => {\n    get(\n      {url: `https://${projectId}.api.sanity.io/v1/data/export/${dataset}`, headers},\n      (err, response) => {\n        if (err) {\n          reject(err)\n          return\n        }\n\n        response.setEncoding('utf8')\n\n        const chunks: Buffer[] = []\n        if (response.statusCode !== 200) {\n          response\n            .on('data', (chunk: Buffer) => chunks.push(chunk))\n            .on('end', () => {\n              const body = JSON.parse(Buffer.concat(chunks).toString('utf8'))\n              reject(new Error(`Error streaming dataset: ${getError(body)}`))\n            })\n          return\n        }\n\n        const documents: SanityDocument[] = []\n        response\n          .pipe(split(JSON.parse))\n          .on('data', (doc: StreamResult) => {\n            if (isStreamError(doc)) {\n              reject(new Error(`Error streaming dataset: ${doc.error}`))\n              return\n            }\n\n            if (doc && isRelevantDocument(doc)) {\n              documents.push(doc)\n            }\n\n            if (documentLimit && documents.length > documentLimit) {\n              reject(\n                new Error(`Error streaming dataset: Reached limit of ${documentLimit} documents`)\n              )\n              response.destroy()\n            }\n          })\n          .on('end', () => resolve(documents))\n      }\n    )\n  })\n}\n","export function assertEnvSupport(): void {\n  const [major] = process.version.replace(/^v/, '').split('.', 1).map(Number)\n  if (major < 10) {\n    throw new Error('Node.js version 10 or higher required')\n  }\n}\n","/**\n * Note: Entry point for _browser_ build is in browser/index.ts\n */\nimport EventSource from 'eventsource'\nimport {groqStore as groqStoreApi} from './groqStore'\nimport {Config, EnvImplementations, GroqStore} from './types'\nimport {getDocuments} from './node/getDocuments'\nimport {assertEnvSupport} from './node/support'\n\nexport function groqStore(config: Config): GroqStore {\n  assertEnvSupport()\n\n  return groqStoreApi(config, {\n    EventSource: (EventSource as any) as EnvImplementations['EventSource'],\n    getDocuments,\n  })\n}\n\nexport {default as groq} from 'groq'\nexport {Subscription, GroqStore} from './types'\n"],"names":["listen","EventSourceImpl","config","handlers","projectId","dataset","token","headers","Authorization","undefined","url","es","withCredentials","addEventListener","open","getMutationParser","next","msg","close","data","JSON","parse","err","error","Error","message","statusCode","origin","window","location","hintSuffix","errorMessage","isErrorLike","unsubscribe","Promise","resolve","cb","isDraft","doc","_id","startsWith","getPublishedId","document","slice","applyPatchWithoutRev","patch","patchDoc","_rev","applyPatch","DEBOUNCE_MS","noop","getSyncingDataset","onNotifyUpdate","getDocuments","EventSource","useListener","overlayDrafts","documentLimit","loaded","then","onUpdate","indexedDocuments","Map","documents","buffer","onDoneLoading","onLoadError","reject","stagedDocs","previousTrx","flushTimeout","listener","onMutationReceived","onOpen","initial","applyBufferedMutations","forEach","set","applyMutation","scheduleUpdate","push","docs","clearTimeout","transactionId","setTimeout","overlay","effects","documentId","get","replaceDocument","apply","id","current","position","indexOf","splice","delete","mutations","groups","mutation","group","find","console","warn","hasFoundRevision","previousRev","overlayed","existing","pretendThatItsPublished","Array","from","values","groqStore","envImplementations","executeThrottled","throttle","subscriptionThrottleMs","executeAllSubscriptions","activeSubscriptions","loadDataset","query","groqQuery","params","tree","result","evaluate","getDocument","groq","documentIds","subQueries","map","join","subscribe","callback","subscription","unsubscribed","executeQuerySubscription","res","deepEqual","previousResult","catch","cancel","isStreamError","description","getError","body","isRelevantDocument","response","setEncoding","chunks","on","chunk","Buffer","concat","toString","pipe","split","length","destroy","assertEnvSupport","major","process","version","replace","Number","groqStoreApi"],"mappings":"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"}