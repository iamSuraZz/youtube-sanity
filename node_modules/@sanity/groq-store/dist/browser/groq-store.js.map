{"version":3,"file":"groq-store.js","sources":["../../src/listen.ts","../../src/drafts.ts","../../src/patch.ts","../../src/syncingDataset.ts","../../src/browser/getDocuments.ts","../../src/browser/index.ts","../../src/browser/support.ts","../../src/groqStore.ts"],"sourcesContent":["import {Subscription, MutationEvent, Config, ApiError} from './types'\n\nexport function listen(\n  EventSourceImpl: typeof EventSource,\n  config: Config,\n  handlers: {\n    open: () => void\n    error: (err: Error) => void\n    next: (event: MutationEvent) => void\n  }\n): Subscription {\n  const {projectId, dataset, token} = config\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}?query=*&effectFormat=mendoza`\n  const es = new EventSourceImpl(url, {withCredentials: true, headers} as any)\n\n  es.addEventListener('welcome', handlers.open, false)\n\n  es.addEventListener('mutation', getMutationParser(handlers.next), false)\n\n  es.addEventListener(\n    'channelError',\n    (msg: any) => {\n      es.close()\n\n      let data\n      try {\n        data = JSON.parse(msg.data) as ApiError\n      } catch (err) {\n        handlers.error(new Error('Unknown error parsing listener message'))\n        return\n      }\n\n      handlers.error(\n        new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`)\n      )\n    },\n    false\n  )\n\n  es.addEventListener(\n    'error',\n    (err) => {\n      const origin = typeof window !== 'undefined' && window.location.origin\n      const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : ''\n      const errorMessage = isErrorLike(err) ? ` (${err.message})` : ''\n      handlers.error(\n        new Error(\n          `Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`\n        )\n      )\n    },\n    false\n  )\n\n  return {\n    unsubscribe: (): Promise<void> => Promise.resolve(es.close()),\n  }\n}\n\nfunction getMutationParser(cb: (event: MutationEvent) => void): (msg: any) => void {\n  return (msg: any) => {\n    let data\n    try {\n      data = JSON.parse(msg.data)\n    } catch (err) {\n      // intentional noop\n      return\n    }\n\n    cb(data)\n  }\n}\n\nfunction isErrorLike(err: unknown): err is {message: string} {\n  return typeof err === 'object' && err !== null && 'message' in err\n}\n","import {SanityDocument} from '@sanity/types'\n\nexport function isDraft(doc: SanityDocument): boolean {\n  return doc._id.startsWith('drafts.')\n}\n\nexport function getPublishedId(document: SanityDocument): string {\n  return isDraft(document) ? document._id.slice(7) : document._id\n}\n","import {SanityDocument} from '@sanity/types'\nimport {applyPatch} from 'mendoza'\n\nexport function applyPatchWithoutRev(\n  doc: SanityDocument | null,\n  patch: unknown[]\n): SanityDocument | null {\n  const patchDoc = {...doc} as Omit<SanityDocument, '_rev'>\n  delete patchDoc._rev\n  return applyPatch(patchDoc, patch)\n}\n","import {SanityDocument} from '@sanity/types'\nimport {listen} from './listen'\nimport {getPublishedId} from './drafts'\nimport {applyPatchWithoutRev} from './patch'\nimport {Config, EnvImplementations, MutationEvent, Subscription} from './types'\n\nconst DEBOUNCE_MS = 25\n\nfunction noop() {\n  return Promise.resolve()\n}\n\nexport function getSyncingDataset(\n  config: Config,\n  onNotifyUpdate: (docs: SanityDocument[]) => void,\n  {getDocuments, EventSource}: EnvImplementations\n): Subscription & {loaded: Promise<void>} {\n  const {projectId, dataset, listen: useListener, overlayDrafts, documentLimit} = config\n\n  if (!useListener) {\n    const loaded = getDocuments({projectId, dataset, documentLimit}).then(onUpdate).then(noop)\n    return {unsubscribe: noop, loaded}\n  }\n\n  const indexedDocuments = new Map<string, SanityDocument>()\n\n  // undefined until the listener has been set up and the initial export is done\n  let documents: SanityDocument[] | undefined\n\n  // holds any mutations that happen while fetching documents so they can be applied after updates\n  const buffer: MutationEvent[] = []\n\n  // Return a promise we can resolve once we've established a listener and reconciled any mutations\n  let onDoneLoading: () => void\n  let onLoadError: (error: Error) => void\n  const loaded = new Promise<void>((resolve, reject) => {\n    onDoneLoading = resolve\n    onLoadError = reject\n  })\n\n  // We don't want to flush updates while we're in the same transaction, so a normal\n  // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is\n  // within the same transaction as the previous, and if not we can flush. Of course,\n  // we can't wait forever, so an upper threshold of X ms should be counted as \"ok to flush\"\n  let stagedDocs: SanityDocument[] | undefined\n  let previousTrx: string | undefined\n  let flushTimeout: number | undefined\n\n  const listener = listen(EventSource, config, {\n    next: onMutationReceived,\n    open: onOpen,\n    error: (error: Error) => onLoadError(error),\n  })\n\n  return {unsubscribe: listener.unsubscribe, loaded}\n\n  async function onOpen() {\n    const initial = await getDocuments({projectId, dataset, documentLimit})\n    documents = applyBufferedMutations(initial, buffer)\n    documents.forEach((doc) => indexedDocuments.set(doc._id, doc))\n    onUpdate(documents)\n    onDoneLoading()\n  }\n\n  function onMutationReceived(msg: MutationEvent) {\n    if (documents) {\n      applyMutation(msg)\n      scheduleUpdate(documents, msg)\n    } else {\n      buffer.push(msg)\n    }\n  }\n\n  function scheduleUpdate(docs: SanityDocument[], msg: MutationEvent) {\n    clearTimeout(flushTimeout)\n\n    if (previousTrx !== msg.transactionId && stagedDocs) {\n      // This is a new transaction, meaning we can immediately flush any pending\n      // doc updates if there are any\n      onUpdate(stagedDocs)\n      previousTrx = undefined\n    } else {\n      previousTrx = msg.transactionId\n      stagedDocs = docs.slice()\n    }\n\n    flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice())\n  }\n\n  function onUpdate(docs: SanityDocument[]) {\n    stagedDocs = undefined\n    flushTimeout = undefined\n    previousTrx = undefined\n    onNotifyUpdate(overlayDrafts ? overlay(docs) : docs)\n  }\n\n  function applyMutation(msg: MutationEvent) {\n    if (!msg.effects || msg.documentId.startsWith('_.')) {\n      return\n    }\n\n    const document = indexedDocuments.get(msg.documentId) || null\n    replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply))\n  }\n\n  function replaceDocument(id: string, document: SanityDocument | null) {\n    const current = indexedDocuments.get(id)\n    const docs = documents || []\n    const position = current ? docs.indexOf(current) : -1\n\n    if (position === -1 && document) {\n      // Didn't exist previously, but was now created. Add it.\n      docs.push(document)\n      indexedDocuments.set(id, document)\n    } else if (document) {\n      // Existed previously and still does. Replace it.\n      docs.splice(position, 1, document)\n      indexedDocuments.set(id, document)\n    } else {\n      // Existed previously, but is now deleted. Remove it.\n      docs.splice(position, 1)\n      indexedDocuments.delete(id)\n    }\n  }\n}\n\nfunction applyBufferedMutations(\n  documents: SanityDocument[],\n  mutations: MutationEvent[]\n): SanityDocument[] {\n  // Group by document ID\n  const groups = new Map<string, MutationEvent[]>()\n  mutations.forEach((mutation) => {\n    const group = groups.get(mutation.documentId) || []\n    group.push(mutation)\n    groups.set(mutation.documentId, group)\n  })\n\n  // Discard all mutations that happened before our current document\n  groups.forEach((group, id) => {\n    const document = documents.find((doc) => doc._id === id)\n    if (!document) {\n      // @todo handle\n      // eslint-disable-next-line no-console\n      console.warn('Received mutation for missing document %s', id)\n      return\n    }\n\n    // Mutations are sorted by timestamp, apply any that arrived after\n    // we fetched the initial documents\n    let hasFoundRevision = false\n    let current: SanityDocument | null = document\n    group.forEach((mutation) => {\n      hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev\n      if (!hasFoundRevision) {\n        return\n      }\n\n      if (mutation.effects) {\n        current = applyPatchWithoutRev(current, mutation.effects.apply)\n      }\n    })\n\n    // Replace the indexed documents\n    documents.splice(documents.indexOf(document), 1, current)\n  })\n\n  return documents\n}\n\nfunction overlay(documents: SanityDocument[]): SanityDocument[] {\n  const overlayed = new Map<string, SanityDocument>()\n\n  documents.forEach((doc) => {\n    const existing = overlayed.get(getPublishedId(doc))\n    if (doc._id.startsWith('drafts.')) {\n      // Drafts always overlay\n      overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc))\n    } else if (!existing) {\n      // Published documents only override if draft doesn't exist\n      overlayed.set(doc._id, doc)\n    }\n  })\n\n  return Array.from(overlayed.values())\n}\n\n// Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,\n// but for now this will have to do\nfunction pretendThatItsPublished(doc: SanityDocument): SanityDocument {\n  return {...doc, _id: getPublishedId(doc)}\n}\n","import {SanityDocument} from '@sanity/types'\nimport {EnvImplementations} from '../types'\n\ntype StreamError = {error: {description?: string; type: string}}\ntype StreamResult = SanityDocument | StreamError\n\nexport const getDocuments: EnvImplementations['getDocuments'] = async function getDocuments({\n  projectId,\n  dataset,\n  token,\n  documentLimit,\n}: {\n  projectId: string\n  dataset: string\n  token?: string\n  documentLimit?: number\n}): Promise<SanityDocument[]> {\n  const url = `https://${projectId}.api.sanity.io/v1/data/export/${dataset}`\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const response = await fetch(url, {credentials: 'include', headers})\n\n  if (response.status !== 200) {\n    throw new Error(`Error streaming dataset: ${getError(await response.json())}`)\n  }\n\n  const stream = getDocumentStream(response.body)\n  const reader = stream.getReader()\n\n  const documents: SanityDocument[] = []\n  let result\n  let document\n  do {\n    result = await reader.read()\n    document = result.value\n\n    if (isStreamError(document)) {\n      throw new Error(`Error streaming dataset: ${document.error}`)\n    } else if (document && isRelevantDocument(document)) {\n      documents.push(document)\n    }\n\n    if (documentLimit && documents.length > documentLimit) {\n      reader.cancel('Reached document limit')\n      throw new Error(`Error streaming dataset: Reached limit of ${documentLimit} documents`)\n    }\n  } while (!result.done)\n\n  return documents\n}\n\nfunction getDocumentStream(body: Response['body']): ReadableStream<StreamResult> {\n  if (!body) {\n    throw new Error('Failed to read body from response')\n  }\n\n  let reader: ReadableStreamDefaultReader<Uint8Array> | undefined\n  let cancelled = false\n\n  function cancel() {\n    cancelled = true\n    if (reader) {\n      reader.cancel()\n    }\n  }\n\n  return new ReadableStream<SanityDocument>({\n    start(controller): void | PromiseLike<void> {\n      reader = body.getReader()\n      const decoder = new TextDecoder()\n      let buffer = ''\n\n      reader\n        .read()\n        .then(processResult)\n        .catch((err) => controller.error(err))\n\n      async function processResult(result: ReadableStreamReadResult<Uint8Array>): Promise<void> {\n        if (result.done) {\n          if (cancelled) {\n            return\n          }\n\n          buffer = buffer.trim()\n          if (buffer.length === 0) {\n            controller.close()\n            return\n          }\n\n          controller.enqueue(JSON.parse(buffer))\n          controller.close()\n          return\n        }\n\n        buffer += decoder.decode(result.value, {stream: true})\n        const lines = buffer.split('\\n')\n\n        for (let i = 0; i < lines.length - 1; ++i) {\n          const line = lines[i].trim()\n          if (line.length === 0) {\n            continue\n          }\n\n          try {\n            controller.enqueue(JSON.parse(line))\n          } catch (err) {\n            controller.error(err)\n            cancel()\n            return\n          }\n        }\n\n        buffer = lines[lines.length - 1]\n\n        if (!reader) {\n          return\n        }\n\n        try {\n          processResult(await reader.read())\n        } catch (err) {\n          controller.error(err)\n        }\n      }\n    },\n\n    cancel,\n  })\n}\n\nfunction isStreamError(result: StreamResult | undefined): result is StreamError {\n  if (!result) {\n    return false\n  }\n\n  if (!('error' in result) || typeof result.error !== 'object' || result.error === null) {\n    return false\n  }\n\n  return (\n    'description' in result.error &&\n    typeof (result as StreamError).error.description === 'string' &&\n    !('_id' in result)\n  )\n}\n\nfunction getError(body: any): string {\n  if (typeof body === 'object' && 'error' in body && 'message' in body) {\n    return body.message || body.error\n  }\n\n  return '<unknown error>'\n}\n\nfunction isRelevantDocument(doc: SanityDocument): boolean {\n  return !doc._id.startsWith('_.')\n}\n","import {groqStore as groqStoreApi} from '../groqStore'\nimport {Config, GroqStore} from '../types'\nimport {getDocuments} from './getDocuments'\nimport {assertEnvSupport} from './support'\n\nexport function groqStore(config: Config): GroqStore {\n  assertEnvSupport()\n\n  if (config.token) {\n    throw new Error('`token` option not currently supported in browser')\n  }\n\n  return groqStoreApi(config, {\n    EventSource: window.EventSource,\n    getDocuments,\n  })\n}\n\nexport {default as groq} from 'groq'\nexport {Subscription, GroqStore} from '../types'\n","export function assertEnvSupport(): void {\n  const required = ['EventSource', 'ReadableStream', 'fetch']\n  const unsupported = required.filter((api) => !(api in window))\n\n  if (unsupported.length > 0) {\n    throw new Error(`Browser not supported. Missing browser APIs: ${unsupported.join(', ')}`)\n  }\n}\n","import groq from 'groq'\nimport deepEqual from 'fast-deep-equal'\nimport {throttle} from 'throttle-debounce'\nimport {SanityDocument} from '@sanity/types'\nimport {parse, evaluate} from 'groq-js'\nimport {Config, EnvImplementations, GroqSubscription, GroqStore, Subscription} from './types'\nimport {getSyncingDataset} from './syncingDataset'\n\nexport function groqStore(config: Config, envImplementations: EnvImplementations): GroqStore {\n  let documents: SanityDocument[] = []\n  const executeThrottled = throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions)\n  const activeSubscriptions: GroqSubscription[] = []\n\n  let dataset: Subscription & {loaded: Promise<void>}\n\n  async function loadDataset() {\n    if (!dataset) {\n      dataset = getSyncingDataset(\n        config,\n        (docs) => {\n          documents = docs\n          executeThrottled()\n        },\n        envImplementations\n      )\n    }\n\n    await dataset.loaded\n  }\n\n  async function query<R = any>(groqQuery: string, params?: Record<string, unknown>): Promise<R> {\n    await loadDataset()\n    const tree = parse(groqQuery, {params})\n    const result = await evaluate(tree as any, {dataset: documents, params})\n    return result.get()\n  }\n\n  async function getDocument(documentId: string): Promise<SanityDocument | null> {\n    await loadDataset()\n    return query(groq`*[_id == $id][0]`, {id: documentId})\n  }\n\n  async function getDocuments(documentIds: string[]): Promise<(SanityDocument | null)[]> {\n    await loadDataset()\n    const subQueries = documentIds.map((id) => `*[_id == \"${id}\"][0]`).join(',\\n')\n    return query(`[${subQueries}]`)\n  }\n\n  function subscribe<R = any>(\n    groqQuery: string,\n    params: Record<string, unknown>,\n    callback: (error: Error | undefined, result?: R) => void\n  ): Subscription {\n    if (!config.listen) {\n      throw new Error('Cannot use `subscribe()` without `listen: true`')\n    }\n\n    // @todo Execute the query against an empty dataset for validation purposes\n\n    // Store the subscription so we can re-run the query on new data\n    const subscription = {query: groqQuery, params, callback}\n    activeSubscriptions.push(subscription)\n\n    let unsubscribed = false\n    const unsubscribe = () => {\n      if (unsubscribed) {\n        return Promise.resolve()\n      }\n\n      unsubscribed = true\n      activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)\n      return Promise.resolve()\n    }\n\n    executeQuerySubscription(subscription)\n    return {unsubscribe}\n  }\n\n  function executeQuerySubscription(subscription: GroqSubscription) {\n    return query(subscription.query, subscription.params)\n      .then((res) => {\n        if ('previousResult' in subscription && deepEqual(subscription.previousResult, res)) {\n          return\n        }\n\n        subscription.previousResult = res\n        subscription.callback(undefined, res)\n      })\n      .catch((err) => {\n        subscription.callback(err)\n      })\n  }\n\n  function executeAllSubscriptions() {\n    activeSubscriptions.forEach(executeQuerySubscription)\n  }\n\n  function close() {\n    executeThrottled.cancel()\n    return dataset ? dataset.unsubscribe() : Promise.resolve()\n  }\n\n  return {query, getDocument, getDocuments, subscribe, close}\n}\n"],"names":["listen","EventSourceImpl","config","handlers","cb","token","es","projectId","dataset","withCredentials","headers","Authorization","undefined","addEventListener","open","next","msg","data","JSON","parse","err","close","error","Error","message","statusCode","origin","window","location","hintSuffix","errorMessage","isErrorLike","unsubscribe","Promise","resolve","getPublishedId","document","_id","startsWith","slice","applyPatchWithoutRev","doc","patch","patchDoc","_rev","applyPatch","noop","s","bind","onFulfilled","result","state","onRejected","_settle","e","getDocuments","documentLimit","fetch","credentials","response","reader","body","cancelled","cancel","ReadableStream","start","controller","getReader","decoder","TextDecoder","buffer","read","then","processResult","done","trim","length","enqueue","lines","decode","value","stream","split","i","line","getDocumentStream","documents","description","isStreamError","push","status","json","unsupported","filter","api","join","assertEnvSupport","envImplementations","query","groqQuery","params","loadDataset","tree","evaluate","get","onNotifyUpdate","EventSource","overlayDrafts","loaded","onUpdate","onDoneLoading","onLoadError","stagedDocs","previousTrx","flushTimeout","indexedDocuments","Map","reject","effects","documentId","id","current","docs","position","indexOf","set","splice","replaceDocument","apply","applyMutation","clearTimeout","transactionId","setTimeout","scheduleUpdate","initial","mutations","groups","forEach","mutation","group","find","hasFoundRevision","previousRev","console","warn","applyBufferedMutations","overlayed","existing","pretendThatItsPublished","Array","from","values","overlay","getSyncingDataset","executeThrottled","throttle","subscriptionThrottleMs","activeSubscriptions","executeQuerySubscription","subscription","res","deepEqual","previousResult","callback","getDocument","groq","documentIds","subQueries","map","subscribe","unsubscribed","groqStoreApi"],"mappings":"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"}